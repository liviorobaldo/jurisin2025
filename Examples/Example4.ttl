@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
#
#  This example contains an obligation and a fact:
#  - (1) "John is obliged to pay £100 to Bill."
#  - (2) The penalty for the obligation in (1) is that "John is obliged to leave Bill's apartment".
#  - (3) The penalty for the obligation in (2) is "to be decided" (by a judge or by another appointed authority).
#  - (4) "John does not leave Bill's apartment".
#  - (5) "Jack does not own money".
#  Furthermore, it contains a rule stating that:
#  - (6) If an individual does not own money, then s/he does not pay.
#
#  As in Example2.ttl and Example3.ttl, from (5) the rule in (6) infers that (7) "John does not pay". Then, from (1) and (7) the first 
#  rule in the file VaP.ttl infers that (1) is violated by (7).
#
#  Then, as in Example3.ttl, from the fact that (1) is violated by (7), the second rule in the file VaP.ttl infers that the penalty of 
#  (1), i.e., (2), holds obligatory: John is obliged to leave Bill's apartment.
#
#  From (2) and (4), the first rule in the file VaP.ttl infers that (2) is violated by (4) and then the second rule in the file VaP.ttl 
#  infers that the penalty of (2), i.e., (3), holds obligatory: John will be obliged to do something "to be decided" (by a judge or by 
#  another appointed authority).
#
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:Own rdf:type rdfs:Class, :Eventuality.
soa:Leave rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-object rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.
soa:has-recipient rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is obliged to pay £100 to Bill
soa:epoj rdf:type :Obligatory, soa:Pay; soa:has-agent soa:John; soa:has-object soa:100pounds; soa:has-recipient soa:Bill.

#If John does not pay £100 to Bill, this penalty applies: John is obliged to leave Bill's house.
soa:epoj :has-penalty soa:pepoj.
soa:pepoj rdf:type soa:Leave; soa:has-agent soa:John; soa:has-object soa:BillApt.
[rdf:type :true; rdf:subject soa:pepoj; rdf:predicate rdf:type; rdf:object :Obligatory].

#If John is obliged to leave Bill's house and he does not, this penalty applies: John is obliged to do something "to be decided"
#(by a judge or by another appointed authority)
soa:pepoj :has-penalty soa:ppepoj.
soa:ppepoj rdf:type :TBD.
[rdf:type :true; rdf:subject soa:ppepoj; rdf:predicate rdf:type; rdf:object :Obligatory].

#John does not leave Bill's apartment.
soa:l rdf:type :false,:hold; rdf:subject soa:elja; rdf:predicate rdf:type; rdf:object :Rexist. 
soa:elja rdf:type soa:Leave; soa:has-agent soa:John; soa:has-object soa:BillApt.

#John does not own any money:
soa:r rdf:type :false,:hold; rdf:subject soa:eojm; rdf:predicate rdf:type; rdf:object :Rexist. 
soa:eojm rdf:type soa:Own; soa:has-agent soa:John; soa:has-object soa:money.

#If an individual does not own money, then s/he does not pay.
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject [rdf:type soa:Pay; soa:has-agent ?a]; rdf:predicate rdf:type; rdf:object :Rexist]}
						WHERE{?ro rdf:type :false,:hold; rdf:subject ?eo; rdf:predicate rdf:type; rdf:object :Rexist. 
							  ?eo rdf:type soa:Own; soa:has-agent ?a; soa:has-object soa:money
							  NOT EXISTS{?rp rdf:type :false,:hold; rdf:subject ?p; rdf:predicate rdf:type; rdf:object :Rexist.
										 ?p rdf:type soa:Pay; soa:has-agent ?a}}"""^^xsd:string].



